# -*- coding: utf-8 -*-
"""Applied Multivariate Linear Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xptuWlT1c8wKeK0yOg4-ee27UrqT9R13
"""

#Supporting functions
def average(values):
  num = 0
  for i in values:
    num = num + i
  return num / len(values)

def variance(values, mean):
  vals = []
  for i in values:
    vals.append((i - mean) ** 2)
  return sum(vals)

def covariance(list1, list2, mean1, mean2):
  covari = []
  for i,j in zip(list1, list2):
    covari.append((i - mean1) * (j - mean2))
  return sum(covari)

def SLR_coef(x, y):
  values = []
  b1 = covariance(x, y, average(x), average(y)) / variance(x, average(x))
  b0 = average(y) - (b1 * average(x))
  values.append(b0)
  values.append(b1)
  return values

def predict(b0, b1, x):
  return (b0 + (b1 * x))

def predict_SLR(xtrain, ytrain, xtest):
  coef = SLR_coef(xtrain, ytrain)
  ypredictions = []
  for i in xtest:
    ypredictions.append(predict(coef[0], coef[1], i))
  return ypredictions

def zeroRR(y_train, x_test):
  mean = average(y_train)
  zeroR = []
  for i in x_test:
    zeroR.append(mean)
  return zeroR

def RMSE(y_actual, y_pred):
  error = 0.0
  for i,j in zip(y_actual,y_pred):
    error = error + ((i-j)**2)
  return (error/len(y_actual))**0.5

import math

#Stochastic gradient descent for Multivariate Linear Regression
def SGD_coef(trainx, trainy, learn_rate, epochs):
  coefficients = [0.0 for x in range(len(trainx[0])+1)]
  for i in range(epochs):
    totalerror = 0
    for j,y in zip(trainx,trainy):
      prediction = SGDpredict(j, coefficients)
      error = (prediction - y)
      error = error[0]
      totalerror = totalerror + (error**2)
      coefficients[0] = coefficients[0] - (learn_rate * error)
      for b,x in zip(coefficients[1:], j):
        coeff = b - (learn_rate * error * x)
        coefficients[coefficients.index(b)] = coeff
    print('>epoch={:.0f}, lrate={:.4f}, error:{:.4f}'.format(i,learn_rate, totalerror))
  return coefficients

#Predict function using current coefficients for SGD_coef
def SGDpredict(instance, coef):
  prediction = coef[0]
  for i,j in zip(instance ,coef[1:]):
    prediction = prediction + (i * j)
  return prediction

#Multivariate Linear Regression function, trains and uses coefficients to predict
def MLR(X_train, y_train, X_test, learning_rate, epochs):
  coefficients = SGD_coef(X_train, y_train, learning_rate, epochs)
  predictions = []
  for i in X_test:
    predictions.append(SGDpredict(i, coefficients))
  print("COEFFICIENTS")
  print(coefficients)
  return predictions